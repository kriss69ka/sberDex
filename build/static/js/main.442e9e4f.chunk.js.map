{"version":3,"sources":["pokeball.png","Card.js","loader.js","PokemonsPage.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Pokeball","src","pokeball","alt","style","width","marginBottom","Card","state","opend","handleClick","setState","pokemon","this","props","className","onClick","name","abilities","map","ability","stats","stat","base_stat","avatar","React","Component","Loader","PokemonsPage","loading","pokemonsList","nameList","currentPage","maxPages","pokeListFecher","offset","limit","fetch","then","response","json","results","pokeInfoFetcher","pokemons","img","Image","sprites","front_default","onload","id","types","handlePageClick","e","selected","prevProps","prevState","key","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.442e9e4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.97a3de79.png\";","import React from 'react';\n\nimport pokeball from './pokeball.png';\n\nconst Pokeball = () => <img src={pokeball} alt=\"pokeball\" style={{ width: '96px', marginBottom: '10px' }} />;\n\n\nexport default class Card extends React.Component {\nstate = {\n  opend: false,\n}\n\nhandleClick = () => this.setState((state) => ({ opend: !state.opend }))\n\nrender() {\n  const { pokemon } = this.props;\n  const { opend } = this.state;\n  return (\n    opend\n      ? pokemon && (\n        <div className=\"card infoCard\" onClick={this.handleClick}>\n          <div>\n        Name:\n            {' '}\n            <span className=\"name\">{pokemon.name}</span>\n          </div>\n          <div>\n        Abilities:\n            {pokemon.abilities && pokemon.abilities.map((ability) => (\n              <span className=\"abilities\">\n                {ability.ability.name}\n              </span>\n            )) || <div>No information</div>}\n          </div>\n          <div>\n        Stats:\n            {pokemon.stats && pokemon.stats.map((stats) => (\n              <div className=\"stats-block\">\n                <div className=\"stats stats-name\">\n                  {stats.stat.name}\n                </div>\n                <div className=\"stats stats-value\">\n                  {stats.base_stat}\n                </div>\n              </div>\n            )) || <div>No information</div>}\n          </div>\n        </div>\n      ) : (\n        <div\n          className=\"card\"\n          onClick={this.handleClick}\n        >\n          {pokemon.avatar ? <img src={pokemon.avatar} alt={pokemon.name} style={{ width: '100%' }} /> : <Pokeball />}\n          <div className=\"name\">{pokemon.name}</div>\n        </div>\n      )\n  );\n}\n}\n","import React from 'react';\nimport './loader.css';\n\nexport default function Loader() {\n  return (\n    <div className=\"center-on-page\">\n\n      <div className=\"pokeball\">\n        <div className=\"pokeball__button\" />\n      </div>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nimport Card from './Card';\nimport Loader from './loader';\n\nexport default class PokemonsPage extends React.Component {\n  // ToDo: переработать хранение и загрузку данных\n  // ToDo: добавить поиск\n\n  state = {\n    loading: true,\n    pokemonsList: {},\n    nameList: [],\n    currentPage: 1,\n    maxPages: 34,\n  };\n\n  componentDidMount() {\n    this.pokeListFecher()\n      .then(this.pokeInfoFetcher);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage, pokemonsList } = this.state;\n    if (currentPage !== prevState.currentPage && !pokemonsList[currentPage]) {\n      this.setState({ loading: true });\n      this.pokeListFecher(currentPage * 28)\n        .then(this.pokeInfoFetcher);\n    }\n  }\n\n  pokeListFecher = (offset = 0, limit = 28) => fetch(`https://pokeapi.co/api/v2/pokemon/?limit=${limit}&offset=${offset}`)\n    .then((response) => response.json())\n    .then((response) => {\n      response.results.map((pokemon) => this.setState((state) => ({\n        pokemonsList: {\n          ...state.pokemonsList,\n          [state.currentPage]: {\n            ...state.pokemonsList[state.currentPage],\n            [pokemon.name]: pokemon,\n          },\n        },\n        nameList: {\n          ...state.nameList,\n          [state.currentPage]: [...(state.nameList[state.currentPage] || []), pokemon.name],\n        },\n      })));\n      return response.results;\n    })\n\n  pokeInfoFetcher = (pokemons) => pokemons.map((pokemon) => fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)\n    .then((response) => response.json())\n    .then((response) => {\n      const img = new Image();\n      img.src = response.sprites.front_default;\n      img.onload = () => {\n        this.setState((state) => ({\n          pokemonsList: {\n            ...state.pokemonsList,\n            [state.currentPage]: {\n              ...state.pokemonsList[state.currentPage],\n              [response.name]: {\n                ...state.pokemonsList[state.currentPage][response.name],\n                id: response.id,\n                avatar: response.sprites.front_default,\n                types: response.types,\n                stats: response.stats,\n                abilities: response.abilities,\n              },\n            },\n          },\n          loading: false,\n        }));\n      };\n      this.setState({ loading: false });\n    }))\n\n    handlePageClick = (e) => this.setState({ currentPage: e.selected + 1 })\n\n    render() {\n      const {\n        pokemonsList, nameList, maxPages, currentPage, loading,\n      } = this.state;\n      return (\n        <>\n          {loading && (\n          <div className=\"loading\">\n            <Loader />\n          </div>\n          )}\n          <div\n            className=\"pokemonsList\"\n          >\n            {nameList[currentPage] && nameList[currentPage].map((id) => {\n              const pokemon = pokemonsList[currentPage][id];\n              return (\n                <Card key={pokemon.name} pokemon={pokemon} />\n              );\n            })}\n          </div>\n          <div className=\"react-paginate\">\n            <ReactPaginate\n              className=\"react-paginate\"\n              pageCount={maxPages}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={5}\n              onPageChange={this.handlePageClick}\n            />\n          </div>\n        </>\n      );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport PokemonsPage from './PokemonsPage';\n\n\nexport default function App() {\n  return (\n    <PokemonsPage />\n  );\n}\n"],"sourceRoot":""}